                   HACKATHON NO: 03 

                           TASK OF DAY NO: 06


                    Deployment Peraperation And Staging Enviorment SetUp


Objectives:

Establish a controlled staging environment for testing and quality assurance.

Ensure smooth deployment with minimal downtime.

Maintain security and performance during the transition to production.

Use best practices for version control, environment variables, and server setup.

Optimize the application for SEO, speed, and scalability.



Professional Environment Type:

Hosting: Use Vercel, AWS, or DigitalOcean for scalability.

Version Control: Manage code with GitHub/GitLab.

CI/CD: Automate deployments with GitHub Actions or Vercel CI/CD.

Security: Implement SSL, HTTPS, and firewall rules.

Performance: Optimize with Next.js SSG/SSR, caching, and CDNs.

Compliance: Follow GDPR and security best practices.



Key Focus Areas:

1. Performance – Fast load times for smooth experience.


2. API Integration – Fetching and displaying food items dynamically.


3. Data Accuracy – Ensuring correct product details in Sanity CMS.


4. Responsiveness – Optimized for both desktop and mobile.


5. User Experience – Easy navigation for customers.


6. Security – Reliable and secure API calls.




Environment Variable Configuration:

1. API Keys & URLs – Store API base URL and authentication keys securely in .env.local.


2. Sanity Credentials – Save Sanity project ID and dataset in environment variables.


3. Security – Never expose sensitive data in frontend code.


4. Next.js Support – Use NEXT_PUBLIC_ prefix for variables needed on the client side.


5. Access Control – Restrict API calls to authorized requests using environment variables.




Staging Environment Testing:

1. Pre-Production Testing – Staging environment replicates the live website for testing before deployment.


2. API Integration Checks – Validate API calls, data fetching, and responses in a controlled environment.


3. UI & Responsiveness – Ensure proper layout, design, and mobile responsiveness.


4. Performance Testing – Check page load times, API response speed, and overall performance.


5. Security & Authentication – Verify user authentication, authorization, and data security.


6. Bug Fixing – Identify and resolve issues before deploying to production.





Documentation Updates:

Create a README.md file summarizing all development and integration activities.

Include all reports, test cases, and deployment instructions in a structured GitHub repository.


Steps for Implementation

Step 1: Hosting Platform Setup

Used Vercel for fast deployment.


Connect Repository

Linked the GitHub repository to the hosting platform.

Configured build settings and added necessary scripts for deployment.


Step 2: Configure Environment Variables

Create a .env file to store sensitive variables like API keys and tokens securely.

NEXT_PUBLIC_SANITY_PROJECT_ID=your_project_id
NEXT_PUBLIC_SANITY_DATASET=production
API_KEY=your_api_key

Upload Variables to Hosting Platform

Used the hosting platform’s dashboard to securely add environment variables.


Step 3: Deploy to Staging

1. Deploy Application

Deployed the application to a staging environment via the hosting platform.


2. Validate Deployment

Ensured the build process completed without errors.

Verified basic functionality in the staging environment.






Step 4: Staging Environment Testing

1. Testing Types

Functional Testing: Verify all features like food item listing and cart operations.

Performance Testing: Use Lighthouse or GTmetrix for speed analysis.

Security Testing: Validate input fields, HTTPS usage, and secure API communications.


Performance Testing

Submit a performance report generated by Lighthouse in the GitHub repository.


Step 5: Documentation Updates

1. Create README.md

Summarize all project activities, including deployment steps and test case results.


2. Organize Project Files

Ensure all files from development and testing phases are stored in a structured folder hierarchy.



Expected Output

1. A fully deployed staging environment for the food truck website.


2. Environment variables securely configured.


3. Test case and performance reports documenting staging tests.


4. All project files and documentation organized in a GitHub repository.


5. A professional README.md file summarizing project activities and results.




My Food Truck Website Deployment Links

Live Website (Vercel):

[https://hackathon02-dun.vercel.app/]

GitHub Repository:

[https://github.com/MaryamAbbas0/Hackathon2.git]

